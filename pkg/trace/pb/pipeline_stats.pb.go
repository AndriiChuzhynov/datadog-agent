// Code generated by protoc-gen-gogo.
// source: pipeline_stats.proto
// DO NOT EDIT!

/*
	Package pb is a generated protocol buffer package.

	It is generated from these files:
		pipeline_stats.proto

	It has these top-level messages:
		PipelineStatsPayload
		ClientPipelineStatsPayload
		ClientPipelineStatsBucket
		ClientGroupedPipelineStats
*/
package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// PipelineStatsPayload is the payload used to send stats from the agent to the backend.
type PipelineStatsPayload struct {
	AgentHostname string                       `protobuf:"bytes,1,opt,name=agentHostname,proto3" json:"agentHostname,omitempty"`
	AgentEnv      string                       `protobuf:"bytes,2,opt,name=agentEnv,proto3" json:"agentEnv,omitempty"`
	AgentVersion  string                       `protobuf:"bytes,3,opt,name=agentVersion,proto3" json:"agentVersion,omitempty"`
	Stats         []ClientPipelineStatsPayload `protobuf:"bytes,4,rep,name=stats" json:"stats"`
}

func (m *PipelineStatsPayload) Reset()         { *m = PipelineStatsPayload{} }
func (m *PipelineStatsPayload) String() string { return proto.CompactTextString(m) }
func (*PipelineStatsPayload) ProtoMessage()    {}
func (*PipelineStatsPayload) Descriptor() ([]byte, []int) {
	return fileDescriptorPipelineStats, []int{0}
}

func (m *PipelineStatsPayload) GetStats() []ClientPipelineStatsPayload {
	if m != nil {
		return m.Stats
	}
	return nil
}

// ClientPipelineStatsPayload is the first layer of pipeline stats aggregation. It is also
// the payload sent by tracers to the agent.
type ClientPipelineStatsPayload struct {
	Hostname string                      `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Env      string                      `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`
	Version  string                      `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Stats    []ClientPipelineStatsBucket `protobuf:"bytes,4,rep,name=stats" json:"stats"`
}

func (m *ClientPipelineStatsPayload) Reset()         { *m = ClientPipelineStatsPayload{} }
func (m *ClientPipelineStatsPayload) String() string { return proto.CompactTextString(m) }
func (*ClientPipelineStatsPayload) ProtoMessage()    {}
func (*ClientPipelineStatsPayload) Descriptor() ([]byte, []int) {
	return fileDescriptorPipelineStats, []int{1}
}

func (m *ClientPipelineStatsPayload) GetStats() []ClientPipelineStatsBucket {
	if m != nil {
		return m.Stats
	}
	return nil
}

// ClientPipelineStatsBucket is a time bucket containing aggregated pipeline stats.
type ClientPipelineStatsBucket struct {
	Start    uint64                       `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	Duration uint64                       `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	Stats    []ClientGroupedPipelineStats `protobuf:"bytes,3,rep,name=stats" json:"stats"`
}

func (m *ClientPipelineStatsBucket) Reset()         { *m = ClientPipelineStatsBucket{} }
func (m *ClientPipelineStatsBucket) String() string { return proto.CompactTextString(m) }
func (*ClientPipelineStatsBucket) ProtoMessage()    {}
func (*ClientPipelineStatsBucket) Descriptor() ([]byte, []int) {
	return fileDescriptorPipelineStats, []int{2}
}

func (m *ClientPipelineStatsBucket) GetStats() []ClientGroupedPipelineStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// ClientGroupedPipelineStats aggregate pipeline stats on spans grouped by
type ClientGroupedPipelineStats struct {
	Service               string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	ReceivingPipelineName string `protobuf:"bytes,2,opt,name=receivingPipelineName,proto3" json:"receivingPipelineName,omitempty"`
	PipelineHash          uint64 `protobuf:"varint,3,opt,name=pipelineHash,proto3" json:"pipelineHash,omitempty"`
	ParentHash            uint64 `protobuf:"varint,4,opt,name=parentHash,proto3" json:"parentHash,omitempty"`
	Summary               []byte `protobuf:"bytes,5,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (m *ClientGroupedPipelineStats) Reset()         { *m = ClientGroupedPipelineStats{} }
func (m *ClientGroupedPipelineStats) String() string { return proto.CompactTextString(m) }
func (*ClientGroupedPipelineStats) ProtoMessage()    {}
func (*ClientGroupedPipelineStats) Descriptor() ([]byte, []int) {
	return fileDescriptorPipelineStats, []int{3}
}

func init() {
	proto.RegisterType((*PipelineStatsPayload)(nil), "pb.PipelineStatsPayload")
	proto.RegisterType((*ClientPipelineStatsPayload)(nil), "pb.ClientPipelineStatsPayload")
	proto.RegisterType((*ClientPipelineStatsBucket)(nil), "pb.ClientPipelineStatsBucket")
	proto.RegisterType((*ClientGroupedPipelineStats)(nil), "pb.ClientGroupedPipelineStats")
}
func (m *PipelineStatsPayload) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PipelineStatsPayload) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AgentHostname) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintPipelineStats(data, i, uint64(len(m.AgentHostname)))
		i += copy(data[i:], m.AgentHostname)
	}
	if len(m.AgentEnv) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintPipelineStats(data, i, uint64(len(m.AgentEnv)))
		i += copy(data[i:], m.AgentEnv)
	}
	if len(m.AgentVersion) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintPipelineStats(data, i, uint64(len(m.AgentVersion)))
		i += copy(data[i:], m.AgentVersion)
	}
	if len(m.Stats) > 0 {
		for _, msg := range m.Stats {
			data[i] = 0x22
			i++
			i = encodeVarintPipelineStats(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ClientPipelineStatsPayload) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ClientPipelineStatsPayload) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hostname) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintPipelineStats(data, i, uint64(len(m.Hostname)))
		i += copy(data[i:], m.Hostname)
	}
	if len(m.Env) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintPipelineStats(data, i, uint64(len(m.Env)))
		i += copy(data[i:], m.Env)
	}
	if len(m.Version) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintPipelineStats(data, i, uint64(len(m.Version)))
		i += copy(data[i:], m.Version)
	}
	if len(m.Stats) > 0 {
		for _, msg := range m.Stats {
			data[i] = 0x22
			i++
			i = encodeVarintPipelineStats(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ClientPipelineStatsBucket) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ClientPipelineStatsBucket) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Start != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintPipelineStats(data, i, uint64(m.Start))
	}
	if m.Duration != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintPipelineStats(data, i, uint64(m.Duration))
	}
	if len(m.Stats) > 0 {
		for _, msg := range m.Stats {
			data[i] = 0x1a
			i++
			i = encodeVarintPipelineStats(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ClientGroupedPipelineStats) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ClientGroupedPipelineStats) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Service) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintPipelineStats(data, i, uint64(len(m.Service)))
		i += copy(data[i:], m.Service)
	}
	if len(m.ReceivingPipelineName) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintPipelineStats(data, i, uint64(len(m.ReceivingPipelineName)))
		i += copy(data[i:], m.ReceivingPipelineName)
	}
	if m.PipelineHash != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintPipelineStats(data, i, uint64(m.PipelineHash))
	}
	if m.ParentHash != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintPipelineStats(data, i, uint64(m.ParentHash))
	}
	if len(m.Summary) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintPipelineStats(data, i, uint64(len(m.Summary)))
		i += copy(data[i:], m.Summary)
	}
	return i, nil
}

func encodeFixed64PipelineStats(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32PipelineStats(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintPipelineStats(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *PipelineStatsPayload) Size() (n int) {
	var l int
	_ = l
	l = len(m.AgentHostname)
	if l > 0 {
		n += 1 + l + sovPipelineStats(uint64(l))
	}
	l = len(m.AgentEnv)
	if l > 0 {
		n += 1 + l + sovPipelineStats(uint64(l))
	}
	l = len(m.AgentVersion)
	if l > 0 {
		n += 1 + l + sovPipelineStats(uint64(l))
	}
	if len(m.Stats) > 0 {
		for _, e := range m.Stats {
			l = e.Size()
			n += 1 + l + sovPipelineStats(uint64(l))
		}
	}
	return n
}

func (m *ClientPipelineStatsPayload) Size() (n int) {
	var l int
	_ = l
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovPipelineStats(uint64(l))
	}
	l = len(m.Env)
	if l > 0 {
		n += 1 + l + sovPipelineStats(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovPipelineStats(uint64(l))
	}
	if len(m.Stats) > 0 {
		for _, e := range m.Stats {
			l = e.Size()
			n += 1 + l + sovPipelineStats(uint64(l))
		}
	}
	return n
}

func (m *ClientPipelineStatsBucket) Size() (n int) {
	var l int
	_ = l
	if m.Start != 0 {
		n += 1 + sovPipelineStats(uint64(m.Start))
	}
	if m.Duration != 0 {
		n += 1 + sovPipelineStats(uint64(m.Duration))
	}
	if len(m.Stats) > 0 {
		for _, e := range m.Stats {
			l = e.Size()
			n += 1 + l + sovPipelineStats(uint64(l))
		}
	}
	return n
}

func (m *ClientGroupedPipelineStats) Size() (n int) {
	var l int
	_ = l
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovPipelineStats(uint64(l))
	}
	l = len(m.ReceivingPipelineName)
	if l > 0 {
		n += 1 + l + sovPipelineStats(uint64(l))
	}
	if m.PipelineHash != 0 {
		n += 1 + sovPipelineStats(uint64(m.PipelineHash))
	}
	if m.ParentHash != 0 {
		n += 1 + sovPipelineStats(uint64(m.ParentHash))
	}
	l = len(m.Summary)
	if l > 0 {
		n += 1 + l + sovPipelineStats(uint64(l))
	}
	return n
}

func sovPipelineStats(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPipelineStats(x uint64) (n int) {
	return sovPipelineStats(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PipelineStatsPayload) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipelineStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PipelineStatsPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PipelineStatsPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentHostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipelineStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentHostname = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentEnv", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipelineStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentEnv = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipelineStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentVersion = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipelineStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stats = append(m.Stats, ClientPipelineStatsPayload{})
			if err := m.Stats[len(m.Stats)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPipelineStats(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPipelineStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientPipelineStatsPayload) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipelineStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientPipelineStatsPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientPipelineStatsPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipelineStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipelineStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Env = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipelineStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipelineStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stats = append(m.Stats, ClientPipelineStatsBucket{})
			if err := m.Stats[len(m.Stats)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPipelineStats(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPipelineStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientPipelineStatsBucket) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipelineStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientPipelineStatsBucket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientPipelineStatsBucket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Start |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Duration |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipelineStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stats = append(m.Stats, ClientGroupedPipelineStats{})
			if err := m.Stats[len(m.Stats)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPipelineStats(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPipelineStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientGroupedPipelineStats) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipelineStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientGroupedPipelineStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientGroupedPipelineStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipelineStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivingPipelineName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipelineStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceivingPipelineName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PipelineHash", wireType)
			}
			m.PipelineHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.PipelineHash |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentHash", wireType)
			}
			m.ParentHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ParentHash |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPipelineStats
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Summary = append(m.Summary[:0], data[iNdEx:postIndex]...)
			if m.Summary == nil {
				m.Summary = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPipelineStats(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPipelineStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPipelineStats(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPipelineStats
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPipelineStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPipelineStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPipelineStats
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPipelineStats
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPipelineStats(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPipelineStats = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPipelineStats   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pipeline_stats.proto", fileDescriptorPipelineStats) }

var fileDescriptorPipelineStats = []byte{
	// 396 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xcf, 0x4a, 0xeb, 0x40,
	0x14, 0xc6, 0x3b, 0x4d, 0x7a, 0xff, 0xcc, 0xed, 0x85, 0x32, 0xf4, 0x42, 0x6e, 0xc1, 0x58, 0x8a,
	0x8b, 0x6e, 0x4c, 0x41, 0xdd, 0xe8, 0xb2, 0x22, 0x76, 0x25, 0x25, 0x82, 0x5b, 0x99, 0xa4, 0x63,
	0x3a, 0xd8, 0x64, 0xc2, 0x64, 0x12, 0xe8, 0x23, 0xb8, 0xf3, 0x0d, 0x7c, 0x0d, 0x1f, 0xa1, 0xb8,
	0xf2, 0x09, 0x44, 0xea, 0x8b, 0xc8, 0x9c, 0x98, 0xe8, 0x48, 0xbb, 0x9b, 0xef, 0x9c, 0x6f, 0x4e,
	0x7e, 0xf3, 0xe5, 0xe0, 0x6e, 0xca, 0x53, 0xb6, 0xe0, 0x09, 0xbb, 0xce, 0x14, 0x55, 0x99, 0x97,
	0x4a, 0xa1, 0x04, 0x69, 0xa6, 0x41, 0x6f, 0x3f, 0xe2, 0x6a, 0x9e, 0x07, 0x5e, 0x28, 0xe2, 0x51,
	0x24, 0x22, 0x31, 0x82, 0x56, 0x90, 0xdf, 0x80, 0x02, 0x01, 0xa7, 0xf2, 0xca, 0xe0, 0x11, 0xe1,
	0xee, 0xf4, 0x63, 0xd6, 0xa5, 0x1e, 0x35, 0xa5, 0xcb, 0x85, 0xa0, 0x33, 0xb2, 0x87, 0xff, 0xd2,
	0x88, 0x25, 0x6a, 0x22, 0x32, 0x95, 0xd0, 0x98, 0x39, 0xa8, 0x8f, 0x86, 0xbf, 0x7d, 0xb3, 0x48,
	0x7a, 0xf8, 0x17, 0x14, 0xce, 0x92, 0xc2, 0x69, 0x82, 0xa1, 0xd6, 0x64, 0x80, 0xdb, 0x70, 0xbe,
	0x62, 0x32, 0xe3, 0x22, 0x71, 0x2c, 0xe8, 0x1b, 0x35, 0x72, 0x82, 0x5b, 0xf0, 0x00, 0xc7, 0xee,
	0x5b, 0xc3, 0x3f, 0x07, 0xae, 0x97, 0x06, 0xde, 0xe9, 0x82, 0xb3, 0x44, 0x6d, 0x82, 0x1a, 0xdb,
	0xab, 0x97, 0xdd, 0x86, 0x5f, 0x5e, 0x19, 0x3c, 0x20, 0xdc, 0xdb, 0xee, 0xd5, 0x68, 0x73, 0x93,
	0xbd, 0xd6, 0xa4, 0x83, 0x2d, 0x56, 0x13, 0xeb, 0x23, 0x71, 0xf0, 0xcf, 0xc2, 0xe0, 0xac, 0x24,
	0x39, 0x36, 0x11, 0x77, 0xb6, 0x20, 0x8e, 0xf3, 0xf0, 0x96, 0x29, 0x93, 0xf0, 0x0e, 0xe1, 0xff,
	0x5b, 0xad, 0xa4, 0x0b, 0x83, 0xa5, 0x02, 0x3a, 0xdb, 0x2f, 0x85, 0xc6, 0x9e, 0xe5, 0x92, 0x2a,
	0x4d, 0xd2, 0x84, 0x46, 0xad, 0x3f, 0xd3, 0xb2, 0xbe, 0xa7, 0x75, 0x2e, 0x45, 0x9e, 0xb2, 0x99,
	0xf9, 0x19, 0x83, 0xe5, 0xa9, 0x4e, 0x6b, 0x93, 0x57, 0xbf, 0x3f, 0x63, 0xb2, 0xe0, 0x61, 0x15,
	0x56, 0x25, 0xc9, 0x11, 0xfe, 0x27, 0x59, 0xc8, 0x78, 0xc1, 0x93, 0xa8, 0xba, 0x73, 0xa1, 0x43,
	0x2d, 0xd3, 0xdb, 0xdc, 0xd4, 0x3f, 0xbf, 0x5a, 0xd1, 0x09, 0xcd, 0xe6, 0x10, 0xaa, 0xed, 0x1b,
	0x35, 0xe2, 0x62, 0x9c, 0x52, 0xa9, 0xd7, 0x49, 0x3b, 0x6c, 0x70, 0x7c, 0xa9, 0x00, 0x53, 0x1e,
	0xc7, 0x54, 0x2e, 0x9d, 0x56, 0x1f, 0x0d, 0xdb, 0x7e, 0x25, 0xc7, 0x9d, 0xd5, 0xda, 0x45, 0xcf,
	0x6b, 0x17, 0xbd, 0xae, 0x5d, 0x74, 0xff, 0xe6, 0x36, 0x82, 0x1f, 0xb0, 0xce, 0x87, 0xef, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xdb, 0x87, 0xe9, 0xd5, 0x19, 0x03, 0x00, 0x00,
}
